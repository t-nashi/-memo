








▼ ECMAScript（エクマスクリプト）のバージョンの話

ECMAScript 3 (December 1999)
ECMAScript 4 (abandoned July 2008)
ECMAScript 5 (December 2009)
ECMAScript 6(2015)
ECMAScript 7(2016)
ECMAScript 8(2017)
ECMAScript 9(2018)


OLD : ES5
NEW : ES6 | ES2015 | ECMAScript 2015

Babel … トランスパイラ（トランスコンパイラ）
ES6 → ES5


ECMAScriptのバージョン5.1 → ES5

ECMAScirpt 2015 → ES6
	Harmony
	ES6 Harmony
	ES6
	ES2015
	ECMAScript 2015

ES2015




▼ 変数名の命名規則
・キャメル記法（ローワーキャメル記法）		： newName、 createLifeGame
・パスカル記法（アッパーキャメル記法）	： NewName、 CreateLifeGame
・アンダースコア記法（スネーク記法）		： new_name、 create_life_game




▼ ES6の新しい変数宣言「let」と「const」の使い方

・ES5までの変数宣言は「var」のみ
・letは「再宣言するとエラーが出る」
・constは「定数としてあつかえる宣言」

		◆ES6の新しい変数宣言「let」と「const」の使い方 | 東京のWeb制作会社LIG
		https://liginc.co.jp/267624

		◆JavaScriptでクロージャー - Qiita
		https://qiita.com/asaori/items/144e792404c70fc3540a





▼ ES6でのデータ型に関する拡張

・シンボル
	シンボルの生成
	var sym1 = Symbol();
	var sym2 = Symbol();

・テンプレートリテラル
	バッククォテーション（`）で文字列を囲む
	\nを使わずにフツーの改行とかがそれと同じ役割になる
	・プレースホルダーを含めることができる
	例）
	var a=2, b=3
	console.log(`${a} + ${b} = ${a+b}`);	// → 2+3=5




▼ オブジェクトの基礎(1) オブジェクトリテラル

・01. オブジェクトとは
──
オブジェクトは名前と値の集まり（連想配列、辞書）

・02. オブジェクトリテラルによるオブジェクトの生成
──
例）
名前					値
suit				"ハート"				← プロパティ
rank				"A"					← プロパティ

オブジェクトの一つ一つのデータ（名前と値の組）はオブジェクトのプロパティと呼ばれる
suitやrankなどのプロパティの名前部分をプロパティ名 or キーと言う。

var card = { suit: "ハート", rank: "A" };

card.suit 		// → ハート
card["rank"] 	// → A

var obj = {};
console.log(obj);		// → Object{ }

・03. プロパティの追加と削除
──

追加：
card.value = 14;

削除：
delete card.rank

・04. in演算子によるプロパティの存在確認
──
console.log("suit" in card);		// → true


・05. オブジェクトリテラルの例
──

・2次元の点を表すオブジェクト
var p = { x: 1.0, y: 2.5 };

・円を表すオブジェクト
var circle = {
	center: {x: 1.0, y: 2.0},
	radius: 2.5
}

・会員情報を表すオブジェクト
var person = {
	name: "田中佐藤"
	age: 18,
	sex: "男",
	married: false
}


・06. メソッド										
──
プロパティの型が関数系であるとき、そのプロパティはメソッドと呼ばれる


・07. オブジェクトは参照型
──
var a = card;
console.log(a.suit); 			// → ハート






▼ 関数リテラルによる関数の定義
関数は関数リテラルで定義することもできる

var square = function(x) { return x+x; };

function(x) { ... } の部分が関数リテラル。
関数リテラル = 匿名関数や無名関数とも呼ばれる



▼ オブジェクトのメソッド
var circle = {
	center: {x: 1.0, y: 2.0},
	radius: 2.5
	area: function() {
		return Math.PI*this.radius*this.radius;
	}
}
cicle.area()			// → 19.634954084936208


cicle.translate = function(a, b) {
	this.center.x = this.center.x + a;
	this.center.y = this.center.y + b;
}





▼ オブジェクトの基礎(2) コンストラクタ

・01. コンストラクタによるオブジェクトの生成
──
function Card(suit,rank) {
	this.suit = suit;
	this.rank = rank;
}
var card = new Card("ハート","A");
console.log(card);									// → Card {suit: "ハート", rank: "A"}

コンストラクタ 					new 演算子でオブジェクトを生成することを想定した関数

var card = {};
card.suit = "ハート";
card.rank = "A";

コンストラクタからnew演算子によって生成されたオブジェクトを、そのコンストラクタのインスタンスと呼ぶ
インスタンスとは「実体」という意味





▼ オブジェクトの基礎(3) 組み込みオブジェクト

例）プログラムを実行した場合の所要時間をミリ秒単位で求められる
var start = new Date();
/* プログラムのコードをここに記述 */
var end = new Date();
var elapsed = end - start;				// プログラムの所要時間（ms単位）


・Functionコンストラクタ
var square = new Function("x", "return x*x");
var 変数名 = new Function(引数1, ..., 引数n, 関数の処理);


・その他の組み込みオブジェクト
・グローバルオブジェクト				プログラムのどこからでも利用できるオブジェクト
・JSON									JSONを扱うためのオブジェクト
・Math									数学関数と数学定数を提供する
・Reflect								インターセプト可能な操作に対する機能を提供


・グローバルオブジェクト
	プログラムのどこからでも利用可能
分類									プロパティ
・グローバルプロパティ			undefined、NaN、Infinity
・コンストラクタ関数				Object()、String()、Number()など
・グローバル関数					parseInt()、parseFloat()、isNaNなど
・組み込みオブジェクト 		Math、JSON、Reflect
console.dir(window);


・JavaScriptのオブジェクトの分類
・ネイティブオブジェクト				組み込みコンストラクタ（Object、String、Number、Boolean、Array、Function）で生成されるオブジェクトやJSON、Math、Reflectなど
・ホストオブジェクト					ブラウザオブジェクト（Window、Navigator、History、Location）、DOMで定義されているオブジェクト、AjaxのためのXMLHttpRequestオブジェクト、HTML5各種APIなど
・ユーザー定義オブジェクト			xxx




▼ 配列の基礎
var evens = [2, 4, 6, 8];

var empty = [];
console.log(empty);			// → []

evens.length;			// → 4


・Arrayコンストラクタによる生成
var evens = new Array(2, 4, 6, 8);
var empty = new Array();
var a = new Array(2, 4);
var various = new Array(3.14, "pi", true, {x:1,y:2}, [2,4,6,8]);


・要素の追加と削除
a.push("D");
delete a[1];


・疎（まばら）な配列
インデックスが0から順番に埋まっていない配列（間が抜けてundefined状態になっている配列）


・配列の要素の存在確認
for(var i in a) console.log(i);					// → 0、1、2、4が表示される
a.hasOwnProperty("3");									// → false
a.hasOwnProperty("4");									// → true




▼ 呼び出し式
・変数、オブジェクトのプロパティ、配列要素、関数の呼び出し式、メソッドの呼び出し式
sum、 circle.ragius、 a[3]、 square(5)、 card.getSum()


▼ 条件演算子（?:）三項演算子
var parity = (a%2 == 0)? "偶数" : "奇数";

↓↓↓ 同じ

if(a%2 == 0) {
	parity = "偶数";
} else {
	parity = "奇数";
}


▼ eval関数
var x = 1;
eval("x++;");

↓↓↓ 同じ

var x = 1;
x++;


▼ 文字列から数値への変換
var s = "2";
s - 0;									// → 2
+s;											// → 2

parseInt("3.14")				// → 3
parseFloat("3.14")			// → 3.14

Number(123)							// → 
Number(true)						// → 1
Number(false)						// → 0

▼ 論理値への変換
!!x
Boolean(x)











▼ メモ
・undefined								値が無い
・i is not defined				宣言されていない
ReferenceError: i is not defined

・スコープ									範囲
・クロージャー								「関数宣言の中に別の関数宣言を書けること（入れ子の関数宣言）」や「ローカル変数を参照している関数内変数」と言われます。
・メソッド										プロパティの型が関数系であるとき、そのプロパティはメソッドと呼ばれる

・関数名にはキャメル記法
・定数（const）は大文字で定義

・グローバルスコープ
・ローカルスコープ
・ブロックスコープ（let・constの変数宣言/宣言子）

・関数リテラル = 匿名関数や無名関数とも呼ばれる

・メソッドはプロパティ

・コンストラクタ 					new 演算子でオブジェクトを生成することを想定した関数
コンストラクタからnew演算子によって生成されたオブジェクトを、そのコンストラクタのインスタンスと呼ぶ

・Stringコンストラクタ（new String）
・Stringオブジェクトの主なメソッド（toString()、charAt(n)など）

・ビット演算
・eval関数
・条件演算子（?:）

・Numberオブジェクトのメソッド（toString、toLocaleStringなど）








▼ JavaScriptの特徴
・01. インタプリタ型（一行ごとに機械語に翻訳）
・02. 動的なプロトタイプベースのオブジェクト指向言語
・03. 動的型付け言語
・04. 関数が第一級のオブジェクト
・05. 関数はクロージャを定義する

▼ JavaScriptの技術的要素
・01. ECMAScript（コア言語 - JavaScriptの中核となる技術）
・02. クライアントサイド固有の技術要素
	・Windowインターフェース			JavaScriptからブラウザやウィンドウを操作する機能を提供
	・DOM										JavaScriptからHTML文書の要素を操作する機能を提供
	・XMLHttpRequest				サーバーと非同期通信を行う機能を提供
	（HTML5のAPIも）
・03. サーバーサイド固有の技術要素
	・Node.js 							Googleの開発したJavaScriptの実行環境
	・Rhino									オープンソースで開発されMozillaが管理しているJavaScriptの実行環境
	・Aptana Jaxer					Aptana社が開発し、現在はオープンソースで開発されているJavaScriptの実行環境


・04. 
・05. 











◆徹底マスター JavaScriptの教科書｜SBクリエイティブ
https://www.sbcr.jp/product/4797388640/

	◆【サンプルデータの公開】『徹底マスター JavaScriptの教科書』｜SBクリエイティブ
	https://www.sbcr.jp/support/13788/



◆JavaScript | MDN
https://developer.mozilla.org/ja/docs/Web/JavaScript





◆脱jQueryの道その２:あの機能は素のJavaScriptでどうやるんだろ編 | webOpixel
https://www.webopixel.net/javascript/1516.html









◆JavaScript初級者のためのコーディングガイド - Qiita
https://qiita.com/raccy/items/bf590d3c10c3f1a2846b

◆10年遅れたJavaScriptの知識をざっくり10分でアップデートしよう - WPJ
https://www.webprofessional.jp/anatomy-of-a-modern-javascript-application/

◆JavaScriptをもう一度学びたい人へ 演算子、条件文、関数の基礎をおさらい - WPJ
https://www.webprofessional.jp/javascript-operators-conditionals-functions/?utm_content=buffer3cbb8&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer

◆JavascriptのChromeでのデバッグ方法個人的まとめ2016 - Qiita
https://qiita.com/snoguchi/items/8f6bb62a3166eca23ac3

◆あなたが知らないJavaScriptの便利すぎるショートハンド19選 - WPJ
https://www.webprofessional.jp/shorthand-javascript-techniques/

◆【JavaScript入門】条件(三項)演算子の使い方と活用例まとめ！ | 侍エンジニア塾ブログ（Samurai Blog） - プログラミング入門者向けサイト
https://www.sejuku.net/blog/23627

◆JavaScriptの配列・多次元配列・連想配列の基本 | てらこや.work
https://www.terakoya.work/javascript-array-basis/









◆ES6 Console - try JavaScript compilers
https://es6console.com/

◆Babel · The compiler for next generation JavaScript
https://babeljs.io/






























