


◆ Settings Sync で設定同期
※ GitHubアカウントにログインしておく

▼ upload
01. Ctrl+Shift+P ＞ sync ＞ Sync: Update/Upload Settings

▼ download
01. Ctrl+Shift+P ＞ sync ＞ Sync: Download Settings



コード整形ショートカット
shift + alt + F




◆VS Codeを使いこなせ! フロントエンジニア必須の拡張機能7選 - ICS MEDIA
https://ics.media/entry/18544/

◆かなり便利！VS CodeでCSSを書きながらFlexboxのチートシートを利用できる -CSS Flexbox Cheatsheet | コリス
https://coliss.com/articles/build-websites/operation/css/css-flexbox-cheatsheet-for-vscode.html

◆【最新版】VSCodeの設定を共有しよう【Settings Sync】 - Qiita
https://qiita.com/kazurego7/items/3dc5a381811e4d429533

◆Visual Studio Codeを日本語化する方法 - Qiita
https://qiita.com/HiroCh/items/481adfa969dbe689f566

◆VSCodeのオススメ拡張機能 24 選 (とTipsをいくつか) - Qiita
https://qiita.com/sensuikan1973/items/74cf5383c02dbcd82234

◆【VSCodeでEmmet入門】 Emmetを使ってHTMLコーディングを効率化しよう。 | TECHNICAL CREATOR
https://technical-creator.com/vscode-emmet/





◆VSCodeの秘伝のワザを大公開！ | Developers.IO
https://dev.classmethod.jp/articles/vscode-awesome-things/

◆【VS Code + Marp】Markdownから爆速・自由自在なデザインで、プレゼンスライドを作る - Qiita
https://qiita.com/tomo_makes/items/aafae4021986553ae1d8

◆【書評】『プログラマーのためのVisual Studio Codeの教科書』はVS Code使いに是非読んでいただきたい１冊！ #VSCodejp #VSCode | Developers.IO
https://dev.classmethod.jp/articles/mrmo-vscode-book-review-20200622/

◆Amazon.co.jp： プログラマーのためのVisual Studio Codeの教科書 (Compass Booksシリーズ) eBook: 川崎 庸市, 平岡 一成, 阿佐 志保: Kindleストア
https://www.amazon.co.jp/dp/B087Q2P56J









▼ VSCodeで速攻ローカルサーバー環境立ち上げてブラウザ同期してコーディングする（browser-sync的なことが）
・Ctrl + Shift + P ＞ Extensions: Install Extensions（拡張機能： 拡張機能のインストール）
・Live Serverがインストールされていることを確認

・ドキュメント開いてウィンドウ右下からLive Serverを起動
・http://127.0.0.1:5500/
・ngrok.exeを起動（参考： https://www.koreyome.com/web/public-urls-for-exposing-your-local-web-server_ngrok/）
・ngrok.exe http 5500 と実行
・表示されたアドレスでアクセス



◆http-server - npm
https://www.npmjs.com/package/http-server

◆[Sy] npm でインストールできる簡易的な Webサーバ「http-server」が手軽で便利 | Syntax Error.
https://utano.jp/entry/2018/02/npm-http-server/



◆VS Codeを使いこなせ! フロントエンジニア必須の拡張機能7選 - ICS MEDIA
https://ics.media/entry/18544/

◆かなり便利！VS CodeでCSSを書きながらFlexboxのチートシートを利用できる -CSS Flexbox Cheatsheet | コリス
https://coliss.com/articles/build-websites/operation/css/css-flexbox-cheatsheet-for-vscode.html

◆【最新版】VSCodeの設定を共有しよう【Settings Sync】 - Qiita
https://qiita.com/kazurego7/items/3dc5a381811e4d429533

◆Visual Studio Codeを日本語化する方法 - Qiita
https://qiita.com/HiroCh/items/481adfa969dbe689f566

◆VSCodeのオススメ拡張機能 24 選 (とTipsをいくつか) - Qiita
https://qiita.com/sensuikan1973/items/74cf5383c02dbcd82234

◆VS CodeでJavaScriptアプリを作成する上で知っていると便利（？）なこと (1/3)：Visual Studio CodeでWebアプリ開発を始めよう - ＠IT
https://www.atmarkit.co.jp/ait/articles/1807/10/news033.html

◆AtomユーザもSublimeユーザも、死角が無いエディタ「VS CODE」に乗り換えよう | WEBA
https://hirata.blog/201807_vs-code-introduction/

◆Windows vs Mac 違いを徹底比較！ | CodeCampus
https://blog.codecamp.jp/windows-mac

◆Microsoft、「Visual Studio Code」の「May 2020」リリースを公開：ワークベンチ、ソース管理、デバッグなどの機能が充実 - ＠IT
https://www.atmarkit.co.jp/ait/articles/2006/15/news136.html













──────────────────────────────────────────────────
 Prettier
──────────────────────────────────────────────────
◆【VSCode】Prettierの使い方＆おすすめ設定を紹介 | 札幌市のWeb・ホームページ制作｜株式会社マーベリックス
https://ma-vericks.com/vscode-prettier/

◆HTMLをprettierでフォーマットかけると変なところで改行がはいる件 - takeda_san’s blog
https://takeda-san.hatenablog.com/entry/2019/09/08/231123

◆Prettier · Opinionated Code Formatter
https://prettier.io/

◆Prettierの導入方法 - フロントエンド開発で必須のコード整形ツール - ICS MEDIA
https://ics.media/entry/17030/


▼ 「.prettierrc」というファイル名で保存すると設定が有効になる

{
  // デフォルト設定
  // "printWidth": 80,
  // "tabWidth": 2,
  // "useTabs": false,
  // "semi": true,
  // "singleQuote": false,
  // "quoteProps": "as-needed",
  // "jsxSingleQuote": false,
  // "trailingComma": "none",
  // "bracketSpacing": true,
  // "jsxBracketSameLine": false,
  // "arrowParens": "avoid",
  // "rangeStart": 0,
  // "rangeEnd": Infinity,
  // "parser": "none",
  // "filepath": "none",
  // "requirePragma": false,
  // "insertPragma": false,
  // "proseWrap": "preserve",
  // "htmlWhitespaceSensitivity": "css",
  // "vueIndentScriptAndStyle": false,
  // "endOfLine": "auto",

  // 設定例
//   "printWidth": 9999999999,     // 自動折り返し文字数
//   "trailingComma": "es5",       // 複数行の場合、可能な限り末尾のコンマを出力
//   "tabWidth": 2,                // タブサイズ
//   "semi": true,                 // ステートメントの最後にセミコロンを付与
//   "singleQuote": true,          // 二重引用符の代わりに単一引用符を使用
//   "endOfLine": "lf"             // 改行の文字コードを指定
}
